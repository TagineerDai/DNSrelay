import threadingfrom socket import *import osfrom BTrees.OOBTree import OOBTreeimport threadingimport timeclass DNSCache:    """Cache[DomainName | IPAddress | Time] with BTree."""    data = OOBTree()  # cache    time = OOBTree()    rec = OOBTree()  # file    path = "dnsrelay.txt"  # default cache path    size = 200  # default cache size    LDT = 3600  # default longest dwelling time    def __init__(self, _path, _CacheSize, _LDT):        self.size = _CacheSize        self.LDT = _LDT        self.path = _path        #timer = threading.timer(1, self.update)        #timer.start()        print self.path        recordfile = open(self.path, 'r')        for record in recordfile:            recs = record.split()            for i in range(len(recs)):                if(i%2==0):                    self.rec.update({recs[i+1]:recs[i]})            # self.time.update({record[1][0:-1].lower():0})        recordfile.close()        print "Loaded " + str(len(self.rec)) + " records in."        print "Initial the new cache, capactity: " + str(self.size)    def add_rec(self, _DomainName, IP):        DomainName = _DomainName.lower()        self.rec.update({DomainName: IP})        if DomainName in self.data:            self.data.__delitem__(DomainName)            self.time.__delitem__(DomainName)    def cache_rec(self, DomainName, IP):        if DomainName in self.rec:            return        if DomainName in self.data:            return        if len(self.data) >= self.size:            self.data.clear()            self.time.clear()        self.data.update({DomainName: IP})        self.time.update({DomainName: 0})    def del_rec(self, _DomainName):        DomainName = _DomainName.lower()        if self.exist(DomainName):            self.data.__delitem__(DomainName)            self.time.__delitem__(DomainName)            self.rec.__delitem__(DomainName)    def update(self):        for DomainName in self.time.keys():            if self.time[DomainName] >= self.LDT:                self.time.__delitem__(DomainName)                self.data.__delitem__(DomainName)            time[k] = time[k] + 1    def save(self, dumpfilename):        dumpfile = open(dumpfilename, 'w')        for pair in self.rec.iteritems():            dumpfile.write(pair[1] + ' ' + pair[0] + '\n')        dumpfile.close()    def exist(self, DomainName):        if DomainName[-10:] == ".workgroup":            DomainName = DomainName[:-10]        if str(DomainName).lower() in self.data:            return True        if str(DomainName).lower() in self.rec:            return True        return False    def get(self, _DomainName):        DomainName = _DomainName.lower()        if DomainName[-10:] == ".workgroup":            DomainName = DomainName[:-10]        if self.rec.has_key(DomainName):            return self.rec[DomainName]        elif self.data.has_key(DomainName):            self.time.update({DomainName: 0})            return self.data[DomainName]        else:            return Nonedef print_all(self):    """The print is for cache, instead of file record."""    DomainNames = list(self.data)    IPs = list(self.data.values())    ans = []    for i in xrange(len(self.data)):        ans.append(IPs[i] + ' ' + DomainNames[i])        # print ans[i]    return ans